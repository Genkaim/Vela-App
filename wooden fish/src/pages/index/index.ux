<template>
  <div class="page">
      <div class="showPlus"  for="{{PlusList}}" tid="uniqueId">
        <div if="{{ani}}" class="showPlusAni" ></div><div if="{{!ani}}" class="showPlusAni_2" ></div>
        <image if="{{local_is_rp}}" class="showPlusCover" src="/common/rp.png"></image>
        <image else class="showPlusCover" src="/common/gd.png"></image>
      </div>
      <image if="{{muyu == 0}}" class="muyu" src="muyu0.png" />
      <image if="{{muyu == 1}}" class="muyu" src="muyu1.png" />
      <image if="{{muyu == 2}}" class="muyu" src="muyu2.png" />
      <image if="{{muyu == 3}}" class="muyu" src="muyu3.png" />
      <image if="{{muyu == 4}}" class="muyu" src="muyu4.png" />
      <div if="{{local_is_rp}}" class="control" onclick="nrpPlusPlus()"></div>
      <div else class="control" onclick="rpPlusPlus()"></div>
      <text if="{{local_is_rp}}" class="cnt" >RP {{nlocalCnt}}</text>
      <text else class="cnt" >功德 {{localCnt}}</text>
      <input class="exit" type="button" onclick="exit()" />
      <input class="setting" type="button" onclick="to_setting()" />
      <image if="{{local_auto}}" class="auto_cover" src="/common/auto_cover.png"></image>
      <!--
      <image if="{{local_auto}}" class="exit_auto" src="/common/exit.png" @click="exit_auto()">退出自动模式</image>
      -->
      <input type="button" if="{{local_auto}}" value="退出" class="exit_auto" @click="exit_auto()" ></div>
    <!--<text if="{{plus && local_enable_ani}}" class="showPlus">{{str_mes}}</text>-->
  </div>
</template>

<script>
  import prompt from '@system.prompt'  //弹窗模块
  import vibrator from '@system.vibrator' //震动模块
  import router from '@system.router' 
  import storage from '@system.storage'
  import brightness from '@system.brightness' 
  function stringToBool(str) {
    if (str.toLowerCase() === "true") return true;
    if (str.toLowerCase() === "false") return false;
    throw new Error("Invalid string value for boolean conversion");
}
  let break_flag=true;
  let _standard = 500;
  let aning = false;
  export default {
    public: {
      PlusList: [],
      auto:false,
      ani: true,
      muyu: 0,
      localCnt: 0,
      nlocalCnt: 0,
      plus: false,
      local_is_rp: false,
      local_enable_ani: false,
      local_enable_vibrate: false,
      local_auto:false,
      str_mes: '功德+1',
      str_vib: 'short',
      list_mes: {false: '功德+1', true: 'RP++'},
      list_vib: {false: 'N', true: 'short'},
      is_in: false
    },
    exit(event) { 
      this.$app.exit()
    },
    to_setting(event) { 
      router.push({
          uri: '/pages/settings',
          params: {
            ___PARAM_LAUNCH_FLAG___: 'clearTask'
          }
          })
    },
    Show() {
      let temp=this.PlusList.length;
      if(temp== 0 && this.local_enable_ani) {
          this.PlusList.push({
            uniqueId: temp,
          });
          this.DeletePlus();
          this.ChangeAni();
        }
    },
    ChangeAni() {
      this.ani = true;
      setTimeout(() => {
        this.ani = false;
      }, 150);
    },
    DeletePlus() {
      setTimeout(() => {
        if(this.PlusList.length > 0){
          this.PlusList.splice(0, 1);
        }
      }, 300);
    },
    ChangeMuyu() {
      if(this.local_enable_ani && !aning) {
        aning = true;
        this.muyu = 0;
        setTimeout(() => {
          this.muyu = 1;
          setTimeout(() => {
            this.muyu = 2;
            setTimeout(() => {
              this.muyu = 3;
              setTimeout(() => {
                this.muyu = 4;
                this.BackMuyu();
              }, 20);
            }, 20);
          },20);
        }, 20);
      }
    },
    BackMuyu(){
      setTimeout(() => {
          this.muyu = 3;
          setTimeout(() => {
            this.muyu = 2;
            setTimeout(() => {
              this.muyu = 1;
              setTimeout(() => {
                this.muyu = 0;
                aning = false;
              }, 25);
            }, 25);
          }, 25);
        }, 25);
    },
    normal_ani() {
      this.ChangeMuyu();
      this.Show();
      let _standard = 20;
      if (!this.local_enable_ani) {
          prompt.showToast({
              message: this.str_mes,
              duration: 200
          });      
      }
      if(this.local_enable_vibrate){
        vibrator.vibrate({
          mode: this.str_vib
      });
      }
    },
    rpPlusPlus(event) {
        if(this.localCnt%_standard == 0){
          //global.runGC();
          //console.log("rungc successfully")
        }
        //console.log(this.localCnt)
        this.localCnt++;
        this.$app.$def.data.rpCount = this.localCnt;
        //console.log(this.localCnt)
        this.normal_ani();
    },
    nrpPlusPlus(event) {
      if(this.nlocalCnt%_standard == 0){
          //global.runGC();
          //console.log("rungc successfully")
        }
        this.nlocalCnt++;
        this.$app.$def.data.nrpCount = this.nlocalCnt;
        this.normal_ani();
    },
    update_data(){
      this.localCnt = this.$app.$def.data.rpCount
      this.nlocalCnt = this.$app.$def.data.nrpCount
      this.local_is_rp = this.$app.$def.data.is_rp
      this.local_enable_vibrate = this.$app.$def.data.enable_vibrate
      this.local_enable_ani = this.$app.$def.data.enable_ani
      this.local_auto = this.$app.$def.data.auto
    },
    onInit() {
      var self = this
      this.localCnt = this.$app.$def.data.rpCount
      this.nlocalCnt = this.$app.$def.data.nrpCount
      this.local_is_rp = this.$app.$def.data.is_rp
      this.local_enable_vibrate = this.$app.$def.data.enable_vibrate
      this.local_enable_ani = this.$app.$def.data.enable_ani
      this.local_auto = this.$app.$def.data.auto
    },
    exit_auto() {
      break_flag = true;
      brightness.setKeepScreenOn({
        keepScreenOn: false,
        success: function() {},
        fail: function(data, code) {}
      })
      setTimeout(() => {
        this.$app.$def.data.auto = false;
        this.local_auto = false;
      }, 400);
    },
    _RunAuto(){
      setTimeout(() => {
        if(this.local_is_rp) {
          this.nrpPlusPlus();
        }
        else{
          this.rpPlusPlus();
        }
        if(!break_flag){
          this._RunAuto()
        }
      }, 400);
    },
    RunAuto(){
      brightness.setKeepScreenOn({
        keepScreenOn: true,
        success: function() {},
        fail: function(data, code) {}
      })
      break_flag = false;
      this._RunAuto();
    },
    onShow() {
      //global.runGC();
      this.localCnt = this.$app.$def.data.rpCount
      this.nlocalCnt = this.$app.$def.data.nrpCount
      this.local_is_rp = this.$app.$def.data.is_rp
      this.local_enable_vibrate = this.$app.$def.data.enable_vibrate
      this.local_enable_ani = this.$app.$def.data.enable_ani
      this.str_mes = this.list_mes[this.local_is_rp]
      this.str_vib = this.list_vib[this.local_enable_vibrate]
      this.local_auto = this.$app.$def.data.auto
      if(this.local_auto){
        this.RunAuto();
        break_flag = false
      }
      //console.log("showing!!")
    }
  }
</script>

<style>
.muyu {
  position: absolute;
  object-fit: contain;
  width:180px;
  top: 140px;
}
.auto_cover {
    position: absolute;
    width: 100%;
    width: 100%;
    object-fit: contain;
  }
  .exit_auto{
    position: absolute;
    object-fit: contain;
    top: 350px;
    color: white;
    font-size:  22px;
    width: 130px;
    height: 60px;
    border-radius: 20px;
    background-color: rgb(36, 36, 36);
  }
  .showPlus {
    position: absolute;
    right: 20px;
    top: 90px;
    color: white;
    font-size:  30px;
  }
  
  .showPlusCover {
    object-fit: contain;
    width: 80px;
    left:-3px;
    animation-name: moveUp;
    animation-delay: 0s;
    animation-duration: 300ms;
    animation-iteration-count: 1;
  }
  .showPlusAni {
    left:75px;
    width:75px;
    height:100px;
    background-color:white;
    animation-name: opa;
    animation-delay: 0s;
    animation-duration: 150ms;
    animation-iteration-count: 1;
  }
  .showPlusAni_2 {
    left:75px;
    width:75px;
    height:100px;
    background-color:white;
    animation-name: opa_2;
    animation-delay: 0s;
    animation-duration: 150ms;
    animation-iteration-count: 1;
  }
  @keyframes moveUp {
    0% {
      transform: translateY(-10px);
    }

    100% {
      transform: translateY(-35px);
    }
  }
  @keyframes opa {
    0% {
      background-color: black;
    }
    100% {
      background-color: white;
    }
  }
  @keyframes opa_2 {
    0% {
      background-color: white;
    }
    100% {
      background-color: black;
    }
  }
.control {
    background-color: rgba(255, 255, 255, 0);
    display: flex;
    justify-content: center; /* 水平居中 */
    top: 15px;
    width: 192px;
    height: 150px;
}
  .page {
    background-color: black;
    display: flex;
    flex-direction: column;
    display: flex;
    justify-content: center; 
    align-items: center; 
  }
  .title, .cnt {
    position: absolute;
    color: white;
    display: flex;
    justify-content: center; /* 水平居中 */
  }
  
  .cnt {
    font-size: 23px;
    bottom:155px;
  }
  .exit {
    position: absolute;
    background-color: rgba(47, 47, 47, 0.003);
    bottom: 16px;
    left: 71.5px;
    height: 50px;
    width: 50px;
    background-image: url('/common/icon-back.png');
  }
  .setting{
    position: absolute;
    background-color: rgba(47, 47, 47, 0.003);
    top: 16px;
    left: 71.5px;
    height: 50px;
    width: 50px;
    background-image: url('/common/icon-settings.png');
  }

</style>